const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '../.env.local' })

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function checkPilotsSchema() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á pilots...\n')

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á pilots ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ rpc
    const { data: columns, error: columnsError } = await supabase
      .rpc('get_table_columns', { table_name: 'pilots' })

    if (columnsError) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ RPC ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...')
      
      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á pilots
      const { data: sampleData, error: sampleError } = await supabase
        .from('pilots')
        .select('*')
        .limit(1)
        .single()

      if (sampleError && sampleError.code !== 'PGRST116') {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á pilots:', sampleError)
        return
      }

      if (sampleData) {
        console.log('‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á pilots ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà')
        console.log('üìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:')
        const existingColumns = Object.keys(sampleData)
        existingColumns.forEach((col, index) => {
          console.log(`${index + 1}. ${col}: ${typeof sampleData[col]}`)
        })

        // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ
        const expectedColumns = [
          'id', 'name', 'phone', 'email', 'line_id', 'address',
          'profile_image_url', 'birth_date', 'gender', 'national_id', 'passport_no',
          'uas_license_no', 'uas_license_expiry', 'insurance_policy', 'special_certificates',
          'total_flight_hours', 'agricultural_hours', 'other_hours', 'drone_models_experience',
          'projects_completed', 'accident_rate', 'status', 'current_location_lat',
          'current_location_lng', 'current_location_updated_at', 'license_expiry_notified',
          'availability_schedule', 'health_check_date', 'health_status', 'safety_score',
          'safety_warnings', 'last_safety_training', 'average_rating', 'total_reviews',
          'punctuality_score', 'quality_score', 'completion_rate', 'role', 'permissions',
          'last_login', 'created_at', 'updated_at', 'is_active', 'experience_years', 'certifications'
        ]

        const missingColumns = expectedColumns.filter(col => !existingColumns.includes(col))
        const extraColumns = existingColumns.filter(col => !expectedColumns.includes(col))

        console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:')
        console.log(`‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${existingColumns.length} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå`)
        console.log(`‚ùå ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ${missingColumns.length} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå`)
        console.log(`‚ÑπÔ∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${extraColumns.length} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå`)

        if (missingColumns.length > 0) {
          console.log('\nüö® ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ:')
          missingColumns.forEach(col => console.log(`   - ${col}`))
        }

        if (extraColumns.length > 0) {
          console.log('\nüìù ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:')
          extraColumns.forEach(col => console.log(`   - ${col}`))
        }
      } else {
        console.log('‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á pilots ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ')
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°...')
    const expectedTables = ['pilot_flight_logs', 'pilot_notifications', 'pilot_trainings']
    
    for (const tableName of expectedTables) {
      const { data, error } = await supabase
        .from(tableName)
        .select('id')
        .limit(1)

      if (error) {
        console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableName}: ‡πÑ‡∏°‡πà‡∏û‡∏ö (${error.message})`)
      } else {
        console.log(`‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableName}: ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß`)
      }
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
checkPilotsSchema()
