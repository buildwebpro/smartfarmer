import { type NextRequest, NextResponse } from "next/server"
import crypto from "crypto"
import { supabase } from "@/lib/supabaseClient"
import { getAIResponse, shouldUseAI } from "@/lib/gemini/ai-helper"

// LINE Webhook handler
export async function POST(request: NextRequest) {
  try {
    const body = await request.text()
    const signature = request.headers.get("x-line-signature")

    console.log("Webhook received:", {
      hasSignature: !!signature,
      bodyLength: body.length,
      hasChannelSecret: !!process.env.LINE_CHANNEL_SECRET,
    })

    // Verify LINE signature
    if (!verifySignature(body, signature)) {
      console.error("Invalid signature")
      return NextResponse.json({ error: "Invalid signature" }, { status: 401 })
    }

    const events = JSON.parse(body).events || []
    console.log("Events received:", events.length)

    for (const event of events) {
      console.log("Processing event:", event.type)

      if (event.type === "message" && event.message.type === "text") {
        const userId = event.source.userId
        const messageText = event.message.text
        const lowerMessage = messageText.toLowerCase()

        console.log("Message from user:", userId, "text:", messageText)

        // Handle different commands
        if (lowerMessage.includes("‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô") || lowerMessage.includes("‡∏û‡πà‡∏ô‡∏¢‡∏≤")) {
          await handleDroneBookingRequest(userId)
        } else if (lowerMessage.includes("‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á") || lowerMessage.includes("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")) {
          await handleEquipmentRentalRequest(userId)
        } else if (lowerMessage.includes("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥") || lowerMessage.includes("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á")) {
          await handleMyBookingsRequest(userId)
        } else if (lowerMessage.includes("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞") || lowerMessage.includes("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")) {
          await handleStatusRequest(userId)
        } else if (lowerMessage.includes("‡∏£‡∏≤‡∏Ñ‡∏≤") || lowerMessage.includes("price")) {
          await handlePriceRequest(userId)
        } else if (lowerMessage.includes("‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠") || lowerMessage.includes("help")) {
          await sendHelpMessage(userId)
        } else if (shouldUseAI(messageText)) {
          // ‡πÉ‡∏ä‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
          await handleAIResponse(userId, messageText)
        } else {
          await sendWelcomeMessage(userId)
        }
      } else if (event.type === "follow") {
        // User added bot as friend
        console.log("New follower:", event.source.userId)
        await sendWelcomeMessage(event.source.userId)
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ú‡∏π‡∏Å Rich Menu ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      }
    }

    return NextResponse.json({ status: "ok" })
  } catch (error) {
    console.error("LINE Webhook error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

// Handle GET request for webhook verification
export async function GET(request: NextRequest) {
  console.log("GET request to webhook - this might be LINE verification")
  return NextResponse.json({ status: "ok", message: "Webhook endpoint is working" })
}

function verifySignature(body: string, signature: string | null): boolean {
  if (!signature) {
    console.error("No signature provided")
    return false
  }

  const channelSecret = process.env.LINE_CHANNEL_SECRET
  if (!channelSecret) {
    console.error("LINE_CHANNEL_SECRET not configured")
    return false
  }

  try {
    const hash = crypto.createHmac("sha256", channelSecret).update(body, "utf8").digest("base64")
    const isValid = hash === signature
    console.log("Signature verification:", { isValid })
    return isValid
  } catch (error) {
    console.error("Error verifying signature:", error)
    return false
  }
}

// ‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏£‡∏ô‡∏û‡πà‡∏ô‡∏¢‡∏≤
async function handleDroneBookingRequest(userId: string) {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000"
  const liffUrl = `${baseUrl}/line/liff/booking`

  await sendLineMessage(userId, {
    type: "flex",
    altText: "‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡πà‡∏ô‡∏¢‡∏≤‡πÇ‡∏î‡∏£‡∏ô",
    contents: {
      type: "bubble",
      hero: {
        type: "image",
        url: "https://via.placeholder.com/800x400/1DB446/FFFFFF?text=%F0%9F%9A%81+Drone+Service",
        size: "full",
        aspectRatio: "20:13",
        aspectMode: "cover",
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üöÅ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡πà‡∏ô‡∏¢‡∏≤‡πÇ‡∏î‡∏£‡∏ô",
            weight: "bold",
            size: "xl",
            color: "#1DB446",
          },
          {
            type: "text",
            text: "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡πà‡∏ô‡∏¢‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏î‡∏£‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û",
            wrap: true,
            size: "sm",
            color: "#666666",
            margin: "md",
          },
          {
            type: "separator",
            margin: "xl",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            spacing: "sm",
            contents: [
              {
                type: "box",
                layout: "baseline",
                contents: [
                  { type: "text", text: "‚úÖ", size: "sm", flex: 0 },
                  { type: "text", text: "‡πÇ‡∏î‡∏£‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ 6 ‡∏•‡∏≥", size: "sm", color: "#555555", margin: "sm" },
                ],
              },
              {
                type: "box",
                layout: "baseline",
                contents: [
                  { type: "text", text: "‚úÖ", size: "sm", flex: 0 },
                  { type: "text", text: "‡∏ô‡∏±‡∏Å‡∏ö‡∏¥‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏°‡∏µ‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï", size: "sm", color: "#555555", margin: "sm" },
                ],
              },
              {
                type: "box",
                layout: "baseline",
                contents: [
                  { type: "text", text: "üí∞", size: "sm", flex: 0 },
                  { type: "text", text: "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 300 ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà", size: "sm", color: "#111111", weight: "bold", margin: "sm" },
                ],
              },
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          {
            type: "button",
            style: "primary",
            height: "sm",
            color: "#1DB446",
            action: {
              type: "uri",
              label: "üì± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
              uri: liffUrl,
            },
          },
          {
            type: "button",
            style: "link",
            height: "sm",
            action: {
              type: "message",
              label: "üí∞ ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
              text: "‡∏£‡∏≤‡∏Ñ‡∏≤",
            },
          },
        ],
      },
    },
  })
}

// ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£
async function handleEquipmentRentalRequest(userId: string) {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000"

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 6 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
  const { data: equipment } = await supabase
    .from("equipment")
    .select("name, model, rental_price_per_day, deposit_amount, category:equipment_categories(name)")
    .eq("is_active", true)
    .eq("status", "available")
    .limit(6)

  const equipmentList = equipment?.map(e => ({
    type: "box",
    layout: "vertical",
    spacing: "xs",
    margin: "md",
    contents: [
      {
        type: "box",
        layout: "baseline",
        contents: [
          { type: "text", text: "üöú", size: "sm", flex: 0 },
          {
            type: "text",
            text: e.name,
            size: "sm",
            weight: "bold",
            color: "#1DB446",
            margin: "sm",
            wrap: true,
            flex: 1,
          },
        ],
      },
      {
        type: "box",
        layout: "baseline",
        spacing: "sm",
        contents: [
          {
            type: "text",
            text: `${e.model || '-'}`,
            size: "xs",
            color: "#999999",
            margin: "sm",
            wrap: true,
          },
        ],
      },
      {
        type: "box",
        layout: "baseline",
        spacing: "sm",
        contents: [
          {
            type: "text",
            text: `üí∞ ${e.rental_price_per_day?.toLocaleString()} ‡∏ö‡∏≤‡∏ó/‡∏ß‡∏±‡∏ô | ‡∏°‡∏±‡∏î‡∏à‡∏≥ ${e.deposit_amount?.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
            size: "xs",
            color: "#555555",
            margin: "sm",
            wrap: true,
          },
        ],
      },
    ],
  })) || []

  await sendLineMessage(userId, {
    type: "flex",
    altText: "‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üöú ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
            weight: "bold",
            size: "xl",
            color: "#1DB446",
          },
          {
            type: "text",
            text: `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ${equipment?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
            size: "sm",
            color: "#666666",
            margin: "md",
          },
          {
            type: "separator",
            margin: "lg",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            spacing: "md",
            contents: equipmentList.length > 0 ? equipmentList : [
              {
                type: "text",
                text: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤",
                size: "sm",
                color: "#999999",
                align: "center",
              }
            ],
          },
          {
            type: "separator",
            margin: "lg",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            spacing: "xs",
            contents: [
              {
                type: "text",
                text: "üí° ‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£",
                size: "xs",
                color: "#666666",
              },
              {
                type: "text",
                text: "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
                size: "xs",
                color: "#999999",
                wrap: true,
              },
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          {
            type: "button",
            style: "primary",
            height: "sm",
            color: "#1DB446",
            action: {
              type: "uri",
              label: "üöú ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£",
              uri: `${baseUrl}/line/liff/booking`,
            },
          },
          {
            type: "button",
            style: "link",
            height: "sm",
            action: {
              type: "message",
              label: "üí∞ ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
              text: "‡∏£‡∏≤‡∏Ñ‡∏≤",
            },
          },
        ],
      },
    },
  })
}

// ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
async function handleMyBookingsRequest(userId: string) {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000"
  const liffUrl = `${baseUrl}/line/liff/my-bookings`

  await sendLineMessage(userId, {
    type: "flex",
    altText: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
            weight: "bold",
            size: "xl",
            color: "#1DB446",
          },
          {
            type: "text",
            text: "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            size: "sm",
            color: "#666666",
            margin: "md",
            wrap: true,
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "button",
            style: "primary",
            height: "sm",
            color: "#1DB446",
            action: {
              type: "uri",
              label: "üì± ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥",
              uri: liffUrl,
            },
          },
        ],
      },
    },
  })
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
async function handleStatusRequest(userId: string) {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const { data: bookings } = await supabase
    .from("bookings")
    .select("*")
    .eq("line_user_id", userId)
    .order("created_at", { ascending: false })
    .limit(1)

  if (!bookings || bookings.length === 0) {
    await sendLineMessage(userId, {
      type: "text",
      text: "üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
    })
    return
  }

  const booking = bookings[0]
  const statusMap: Record<string, string> = {
    pending_payment: "‚è≥ ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
    paid: "‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
    assigned: "üë®‚Äç‚úàÔ∏è ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
    in_progress: "üöÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
    completed: "‚ú® ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
    cancelled: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
  }

  await sendLineMessage(userId, {
    type: "flex",
    altText: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î",
            weight: "bold",
            size: "lg",
            color: "#1DB446",
          },
          {
            type: "separator",
            margin: "md",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            spacing: "sm",
            contents: [
              {
                type: "box",
                layout: "baseline",
                contents: [
                  { type: "text", text: "‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≠‡∏á:", size: "sm", color: "#aaaaaa", flex: 2 },
                  { type: "text", text: booking.booking_code, size: "sm", color: "#666666", flex: 3, wrap: true },
                ],
              },
              {
                type: "box",
                layout: "baseline",
                contents: [
                  { type: "text", text: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", size: "sm", color: "#aaaaaa", flex: 2 },
                  { type: "text", text: statusMap[booking.status] || booking.status, size: "sm", color: "#111111", weight: "bold", flex: 3 },
                ],
              },
              {
                type: "box",
                layout: "baseline",
                contents: [
                  { type: "text", text: "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:", size: "sm", color: "#aaaaaa", flex: 2 },
                  { type: "text", text: `${booking.total_price?.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, size: "sm", color: "#666666", flex: 3 },
                ],
              },
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "button",
            style: "link",
            height: "sm",
            action: {
              type: "message",
              label: "‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
              text: "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
            },
          },
        ],
      },
    },
  })
}

// ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤ - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function handlePriceRequest(userId: string) {
  const { data: cropTypes } = await supabase
    .from("crop_types")
    .select("name, price_per_rai")
    .eq("is_active", true)
    .order("name")

  const { data: sprayTypes } = await supabase
    .from("spray_types")
    .select("name, price_per_rai")
    .eq("is_active", true)
    .order("name")

  const cropContents = cropTypes?.map(crop => ({
    type: "box",
    layout: "baseline",
    contents: [
      { type: "text", text: `‚Ä¢ ${crop.name}`, size: "sm", flex: 3 },
      { type: "text", text: `${crop.price_per_rai} ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà`, size: "sm", flex: 2, align: "end" as const },
    ],
  })) || []

  const sprayContents = sprayTypes?.map(spray => ({
    type: "box",
    layout: "baseline",
    contents: [
      { type: "text", text: `‚Ä¢ ${spray.name}`, size: "sm", flex: 3 },
      { type: "text", text: `${spray.price_per_rai} ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà`, size: "sm", flex: 2, align: "end" as const },
    ],
  })) || []

  await sendLineMessage(userId, {
    type: "flex",
    altText: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
    contents: {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
            weight: "bold",
            size: "xl",
            color: "#1DB446",
          },
        ],
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üåæ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä",
            weight: "bold",
            size: "md",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "md",
            spacing: "sm",
            contents: cropContents,
          },
          {
            type: "separator",
            margin: "xl",
          },
          {
            type: "text",
            text: "üß™ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏£‡∏û‡πà‡∏ô",
            weight: "bold",
            size: "md",
            margin: "xl",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "md",
            spacing: "sm",
            contents: sprayContents,
          },
          {
            type: "separator",
            margin: "xl",
          },
          {
            type: "text",
            text: "üìù ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° = (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡∏ä + ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≤‡∏£) √ó ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏£‡πà\nüíµ ‡∏°‡∏±‡∏î‡∏à‡∏≥ 30%",
            size: "xs",
            color: "#666666",
            wrap: true,
            margin: "lg",
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "button",
            style: "primary",
            height: "sm",
            color: "#1DB446",
            action: {
              type: "message",
              label: "‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢",
              text: "‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô",
            },
          },
        ],
      },
    },
  })
}

// ‡πÉ‡∏ä‡πâ AI ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
async function handleAIResponse(userId: string, message: string) {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000"

  try {
    const aiResponse = await getAIResponse(message)

    await sendLineMessage(userId, {
      type: "flex",
      altText: "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI Assistant",
      contents: {
        type: "bubble",
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            {
              type: "text",
              text: "ü§ñ AI Assistant",
              weight: "bold",
              size: "lg",
              color: "#1DB446",
            },
            {
              type: "separator",
              margin: "md",
            },
            {
              type: "text",
              text: aiResponse,
              wrap: true,
              size: "sm",
              color: "#333333",
              margin: "md",
            },
            {
              type: "separator",
              margin: "lg",
            },
            {
              type: "box",
              layout: "vertical",
              margin: "lg",
              spacing: "sm",
              contents: [
                {
                  type: "text",
                  text: "üí° ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ:",
                  weight: "bold",
                  size: "xs",
                  color: "#666666",
                },
                {
                  type: "text",
                  text: "‚Ä¢ ‡πÇ‡∏î‡∏£‡∏ô‡∏û‡πà‡∏ô‡∏¢‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£\n‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏á\n‚Ä¢ ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ñ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏´‡∏°\n‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô",
                  size: "xs",
                  color: "#999999",
                  wrap: true,
                },
              ],
            },
          ],
        },
        footer: {
          type: "box",
          layout: "vertical",
          spacing: "xs",
          contents: [
            {
              type: "button",
              style: "primary",
              height: "sm",
              color: "#1DB446",
              action: {
                type: "uri",
                label: "üöÅ ‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
                uri: `${baseUrl}/line/liff/booking`,
              },
            },
            {
              type: "button",
              style: "link",
              height: "sm",
              action: {
                type: "message",
                label: "üí∞ ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤",
                text: "‡∏£‡∏≤‡∏Ñ‡∏≤",
              },
            },
            {
              type: "button",
              style: "link",
              height: "sm",
              action: {
                type: "message",
                label: "‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
                text: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
              },
            },
          ],
        },
      },
    })
  } catch (error) {
    console.error("AI Response error:", error)

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô
    await sendLineMessage(userId, {
      type: "flex",
      altText: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ",
      contents: {
        type: "bubble",
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            {
              type: "text",
              text: "üòä ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞",
              weight: "bold",
              size: "lg",
              color: "#FF6B6B",
            },
            {
              type: "separator",
              margin: "md",
            },
            {
              type: "text",
              text: "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞",
              wrap: true,
              size: "sm",
              color: "#555555",
              margin: "md",
            },
          ],
        },
        footer: {
          type: "box",
          layout: "vertical",
          spacing: "xs",
          contents: [
            {
              type: "button",
              style: "primary",
              height: "sm",
              color: "#1DB446",
              action: {
                type: "uri",
                label: "üöÅ ‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏£‡∏ô",
                uri: `${baseUrl}/line/liff/booking`,
              },
            },
            {
              type: "button",
              style: "link",
              height: "sm",
              action: {
                type: "message",
                label: "üöú ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£",
                text: "‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£",
              },
            },
            {
              type: "button",
              style: "link",
              height: "sm",
              action: {
                type: "message",
                label: "üí∞ ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤",
                text: "‡∏£‡∏≤‡∏Ñ‡∏≤",
              },
            },
            {
              type: "button",
              style: "link",
              height: "sm",
              action: {
                type: "message",
                label: "‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
                text: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
              },
            },
          ],
        },
      },
    })
  }
}

async function sendWelcomeMessage(userId: string) {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000"

  await sendLineMessage(userId, {
    type: "flex",
    altText: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö",
    contents: {
      type: "bubble",
      hero: {
        type: "image",
        url: "https://via.placeholder.com/800x400/1DB446/FFFFFF?text=Welcome",
        size: "full",
        aspectRatio: "20:10",
        aspectMode: "cover",
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üåæ ‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏£‡∏∏‡∏ô‡∏ó‡∏£‡πå ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™",
            weight: "bold",
            size: "xl",
            color: "#1DB446",
          },
          {
            type: "text",
            text: "‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£",
            size: "md",
            color: "#666666",
            margin: "sm",
          },
          {
            type: "separator",
            margin: "lg",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            spacing: "md",
            contents: [
              {
                type: "text",
                text: "üì± ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤:",
                weight: "bold",
                size: "sm",
              },
              {
                type: "text",
                text: "üöÅ ‡∏û‡πà‡∏ô‡∏¢‡∏≤‡πÇ‡∏î‡∏£‡∏ô - ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢\nüöú ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ - ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏™‡∏∞‡∏î‡∏ß‡∏Å",
                size: "sm",
                wrap: true,
                color: "#555555",
              },
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "sm",
        contents: [
          {
            type: "button",
            style: "primary",
            height: "sm",
            color: "#1DB446",
            action: {
              type: "uri",
              label: "üöÅ ‡∏à‡∏≠‡∏á‡∏û‡πà‡∏ô‡∏¢‡∏≤‡πÇ‡∏î‡∏£‡∏ô",
              uri: `${baseUrl}/line/liff/booking`,
            },
          },
          {
            type: "button",
            style: "link",
            height: "sm",
            action: {
              type: "message",
              label: "üöú ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£",
              text: "‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£",
            },
          },
          {
            type: "button",
            style: "link",
            height: "sm",
            action: {
              type: "message",
              label: "ü§ñ ‡∏ñ‡∏≤‡∏° AI",
              text: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            },
          },
        ],
      },
    },
  })

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  await sendLineMessage(userId, {
    type: "text",
    text: "üí¨ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô:\n\n‚Ä¢ \"‡πÇ‡∏î‡∏£‡∏ô‡∏û‡πà‡∏ô‡∏¢‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£\"\n‚Ä¢ \"‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏á\"\n‚Ä¢ \"‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ñ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏´‡∏°\"\n‚Ä¢ \"‡∏ä‡πà‡∏ß‡∏á‡πÑ‡∏´‡∏ô‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏û‡πà‡∏ô‡∏¢‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î\"\n\n‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:\nüì± ‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏£‡∏≤‡∏Ñ‡∏≤\" - ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£\nüìä ‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\" - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n‚ùì ‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠\" - ‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
  })
}

async function sendHelpMessage(userId: string) {
  await sendLineMessage(userId, {
    type: "flex",
    altText: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
    contents: {
      type: "bubble",
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "üÜò ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
            weight: "bold",
            size: "xl",
            color: "#1DB446",
          },
          {
            type: "separator",
            margin: "md",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            spacing: "sm",
            contents: [
              {
                type: "text",
                text: "üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:",
                weight: "bold",
                size: "sm",
              },
              {
                type: "text",
                text: "üöÅ ‡∏à‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô - ‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡πà‡∏ô‡∏¢‡∏≤\nüöú ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ - ‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå\nüìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ - ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
                size: "sm",
                wrap: true,
                color: "#555555",
                margin: "md",
              },
            ],
          },
          {
            type: "separator",
            margin: "lg",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            spacing: "sm",
            contents: [
              {
                type: "text",
                text: "ü§ñ ‡∏ñ‡∏≤‡∏° AI Assistant:",
                weight: "bold",
                size: "sm",
              },
              {
                type: "text",
                text: "‚Ä¢ ‡πÇ‡∏î‡∏£‡∏ô‡∏û‡πà‡∏ô‡∏¢‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£\n‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏á\n‚Ä¢ ‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ñ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏´‡∏°\n‚Ä¢ ‡∏û‡πà‡∏ô‡∏¢‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏Ñ‡∏ß‡∏£‡∏ä‡πà‡∏ß‡∏á‡πÑ‡∏´‡∏ô\n‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô",
                size: "xs",
                wrap: true,
                color: "#666666",
                margin: "sm",
              },
            ],
          },
          {
            type: "separator",
            margin: "lg",
          },
          {
            type: "box",
            layout: "vertical",
            margin: "lg",
            contents: [
              {
                type: "text",
                text: "üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:",
                weight: "bold",
                size: "sm",
              },
              {
                type: "text",
                text: "‡πÇ‡∏ó‡∏£: 02-xxx-xxxx\n‡πÄ‡∏ß‡∏•‡∏≤: 08:00-18:00 ‡∏ô.",
                size: "sm",
                color: "#555555",
                margin: "sm",
              },
            ],
          },
        ],
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          {
            type: "button",
            style: "primary",
            height: "sm",
            color: "#1DB446",
            action: {
              type: "message",
              label: "ü§ñ ‡∏ñ‡∏≤‡∏° AI",
              text: "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            },
          },
          {
            type: "button",
            style: "link",
            height: "sm",
            action: {
              type: "message",
              label: "üí∞ ‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤",
              text: "‡∏£‡∏≤‡∏Ñ‡∏≤",
            },
          },
        ],
      },
    },
  })
}

async function sendLineMessage(userId: string, message: any) {
  const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN

  if (!LINE_CHANNEL_ACCESS_TOKEN) {
    console.error("LINE_CHANNEL_ACCESS_TOKEN not configured")
    return
  }

  try {
    console.log("Sending message to user:", userId)

    const response = await fetch("https://api.line.me/v2/bot/message/push", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
      },
      body: JSON.stringify({
        to: userId,
        messages: [message],
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error("Failed to send LINE message:", response.status, errorText)
    } else {
      console.log("Message sent successfully")
    }
  } catch (error) {
    console.error("Error sending LINE message:", error)
  }
}
