"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Calendar } from "@/components/ui/calendar"
import { MapPin, Calculator, CreditCard, Navigation, FileText, Zap, Truck } from "lucide-react"
import { th } from "date-fns/locale"
import Image from "next/image"
import Link from "next/link"

interface CropType {
  id: string
  name: string
  pricePerRai: number
}

interface SprayType {
  id: string
  name: string
  pricePerRai: number
}

interface Equipment {
  id: string
  name: string
  model: string
  rental_price_per_day: number
  deposit_amount: number
  category?: {
    name: string
  }
}

export default function BookingPage() {
  const [serviceType, setServiceType] = useState<'drone' | 'equipment'>('drone')
  const [equipment, setEquipment] = useState<Equipment[]>([])
  const [selectedEquipment, setSelectedEquipment] = useState<string>('')

  const [formData, setFormData] = useState({
    // Basic info
    customerName: "",
    phoneNumber: "",
    customerEmail: "",

    // Farm location
    farmAddress: "",
    district: "",
    province: "",
    farmAreaSize: "",
    cropPlanted: "",
    terrainType: "",

    // Service details
    areaSize: "",
    cropType: "",
    sprayType: "",
    gpsCoordinates: "",
    selectedDate: undefined as Date | undefined,

    // Time preferences
    urgencyLevel: "normal",
    preferredWorkTime: "",

    // Additional info
    hasWaterSource: false,
    hasObstacles: false,
    specialRequirements: "",
    referralSource: "",
    notes: "",

    // Terms
    termsAccepted: false,
    damagePolicyAccepted: false,
    fuelResponsibilityAccepted: false,
    returnConditionAccepted: false,
  })
  const [lineUserId, setLineUserId] = useState<string>("guest-user")
  const [gettingLocation, setGettingLocation] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [liffReady, setLiffReady] = useState(true) // ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏•‡∏¢
  const [liffError, setLiffError] = useState<string>("")

  const [cropTypes, setCropTypes] = useState<CropType[]>([
    { id: "rice", name: "‡∏Ç‡πâ‡∏≤‡∏ß", pricePerRai: 300 },
    { id: "corn", name: "‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î", pricePerRai: 350 },
    { id: "sugarcane", name: "‡∏≠‡πâ‡∏≠‡∏¢", pricePerRai: 400 },
    { id: "cassava", name: "‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á", pricePerRai: 320 },
    { id: "rubber", name: "‡∏¢‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤", pricePerRai: 380 }
  ])
  const [sprayTypes, setSprayTypes] = useState<SprayType[]>([
    { id: "herbicide", name: "‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡∏´‡∏ç‡πâ‡∏≤", pricePerRai: 100 },
    { id: "insecticide", name: "‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á", pricePerRai: 150 },
    { id: "fertilizer", name: "‡∏õ‡∏∏‡πà‡∏¢‡πÄ‡∏´‡∏•‡∏ß", pricePerRai: 200 },
    { id: "fungicide", name: "‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤", pricePerRai: 180 }
  ])
  const [loadingTypes, setLoadingTypes] = useState(false) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

  const [totalPrice, setTotalPrice] = useState(0)
  const [depositAmount, setDepositAmount] = useState(0)
  const [showQR, setShowQR] = useState(false)
  const [lastDeposit, setLastDeposit] = useState(0)

  useEffect(() => {
    calculatePrice()
  }, [formData.areaSize, formData.cropType, formData.sprayType, selectedEquipment, serviceType])

  useEffect(() => {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏£‡∏û‡πà‡∏ô‡∏à‡∏≤‡∏Å API
    const fetchTypes = async () => {
      setLoadingTypes(true) // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        const [cropResponse, sprayResponse, equipmentResponse] = await Promise.all([
          fetch("/api/crop-types"),
          fetch("/api/spray-types"),
          fetch("/api/equipment?status=available")
        ])

        const [cropResult, sprayResult, equipmentResult] = await Promise.all([
          cropResponse.json(),
          sprayResponse.json(),
          equipmentResponse.json()
        ])

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        if (cropResult.data && cropResult.data.length > 0) {
          setCropTypes(cropResult.data)
        }

        if (sprayResult.data && sprayResult.data.length > 0) {
          setSprayTypes(sprayResult.data)
        }

        if (equipmentResult.success && equipmentResult.data) {
          setEquipment(equipmentResult.data)
        }
      } catch (error) {
        console.error("Error fetching types:", error)
        // ‡∏Ñ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡∏Å API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      } finally {
        setLoadingTypes(false)
      }
    }
    fetchTypes()

    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ LIFF ‡∏´‡∏£‡∏∑‡∏≠ LINE login - ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    console.log('üì± [LIFF] Simulated LIFF environment ready');
    setLiffReady(true);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á persistent user ID ‡πÉ‡∏ô localStorage
    const getOrCreateUserId = () => {
      let userId = localStorage.getItem('guest_user_id');
      if (!userId) {
        userId = 'guest-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('guest_user_id', userId);
        console.log('üìù [USER] Created new guest user ID:', userId);
      } else {
        console.log('üîÑ [USER] Retrieved existing guest user ID:', userId);
      }
      return userId;
    };

    const userId = getOrCreateUserId();
    setLineUserId(userId);
  }, [])

  const calculatePrice = () => {
    if (serviceType === 'drone') {
      const areaSize = Number.parseFloat(formData.areaSize) || 0
      const selectedCrop = cropTypes.find((c) => c.id === formData.cropType)
      const selectedSpray = sprayTypes.find((s) => s.id === formData.sprayType)

      if (areaSize && selectedCrop && selectedSpray) {
        const total = areaSize * (selectedCrop.pricePerRai + selectedSpray.pricePerRai)
        setTotalPrice(total)
        setDepositAmount(total * 0.3)
      } else {
        setTotalPrice(0)
        setDepositAmount(0)
      }
    } else {
      // Equipment rental - daily rate
      const selectedEquip = equipment.find((e) => e.id === selectedEquipment)
      if (selectedEquip) {
        setTotalPrice(selectedEquip.rental_price_per_day)
        setDepositAmount(selectedEquip.deposit_amount)
      } else {
        setTotalPrice(0)
        setDepositAmount(0)
      }
    }
  }

  const handleGetLocation = async () => {
    setGettingLocation(true)
    try {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords
            const gpsCoords = `${latitude}, ${longitude}`
            setFormData({ ...formData, gpsCoordinates: gpsCoords })
            setGettingLocation(false)
          },
          (error) => {
            console.error("Error getting location:", error)
            alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô GPS")
            setGettingLocation(false)
          },
          { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
        )
      } else {
        alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")
        setGettingLocation(false)
      }
    } catch (error) {
      console.error("Error:", error)
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")
      setGettingLocation(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    // Validate required fields
    if (!formData.customerName.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•")
      return
    }

    if (!formData.phoneNumber.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå")
      return
    }

    if (!formData.farmAddress.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£")
      return
    }

    if (!formData.district.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠")
      return
    }

    if (!formData.province.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
      return
    }

    if (serviceType === 'drone') {
      if (!formData.areaSize) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏£‡πà")
        return
      }

      if (!formData.cropType) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä")
        return
      }

      if (!formData.sprayType) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏£‡∏û‡πà‡∏ô")
        return
      }

      if (!formData.gpsCoordinates.trim()) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ GPS ‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á")
        return
      }
    } else {
      if (!selectedEquipment) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")
        return
      }
    }

    if (!formData.selectedDate) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
      return
    }

    // Validate terms acceptance
    if (!formData.termsAccepted || !formData.damagePolicyAccepted ||
        !formData.fuelResponsibilityAccepted || !formData.returnConditionAccepted) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
      return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏é 3 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
    const today = new Date()
    const minDate = new Date(today)
    minDate.setDate(today.getDate() + 3)
    minDate.setHours(0, 0, 0, 0)
    
    const selectedDate = new Date(formData.selectedDate)
    selectedDate.setHours(0, 0, 0, 0)
    
    if (selectedDate < minDate) {
      alert(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${minDate.toLocaleDateString("th-TH")}`)
      return
    }

    // Show confirmation dialog
    const confirmed = confirm(`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£?\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ:\n- ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${formData.customerName}\n- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${formData.phoneNumber}\n- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏£‡πà: ${formData.areaSize}\n- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: ${totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n- ‡∏°‡∏±‡∏î‡∏à‡∏≥: ${depositAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`)
    
    if (!confirmed) {
      return
    }

    setIsSubmitting(true)

    const bookingData = serviceType === 'drone'
      ? {
          ...formData,
          farmAreaSize: formData.farmAreaSize ? parseFloat(formData.farmAreaSize) : undefined,
          lineUserId,
          totalPrice,
          depositAmount,
          status: "pending_payment",
          createdAt: new Date().toISOString(),
          booking_type: "service",
        }
      : {
          customerName: formData.customerName,
          phoneNumber: formData.phoneNumber,
          customerEmail: formData.customerEmail,
          farmAddress: formData.farmAddress,
          district: formData.district,
          province: formData.province,
          farmAreaSize: formData.farmAreaSize ? parseFloat(formData.farmAreaSize) : undefined,
          cropPlanted: formData.cropPlanted,
          terrainType: formData.terrainType,
          selectedDate: formData.selectedDate,
          urgencyLevel: formData.urgencyLevel,
          preferredWorkTime: formData.preferredWorkTime,
          hasWaterSource: formData.hasWaterSource,
          hasObstacles: formData.hasObstacles,
          specialRequirements: formData.specialRequirements,
          referralSource: formData.referralSource,
          notes: formData.notes,
          termsAccepted: formData.termsAccepted,
          damagePolicyAccepted: formData.damagePolicyAccepted,
          fuelResponsibilityAccepted: formData.fuelResponsibilityAccepted,
          returnConditionAccepted: formData.returnConditionAccepted,
          lineUserId,
          totalPrice,
          depositAmount,
          status: "pending_payment",
          createdAt: new Date().toISOString(),
          booking_type: "rental",
          equipment_id: selectedEquipment,
        }

    try {
      const response = await fetch("/api/bookings", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(bookingData),
      })

      if (response.ok) {
        setLastDeposit(depositAmount)
        setShowQR(true)
        setIsSubmitting(false)
        // ‡πÑ‡∏°‡πà alert, ‡πÑ‡∏°‡πà redirect
      } else {
        setIsSubmitting(false)
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
      }
    } catch (error) {
      console.error("Error:", error)
      setIsSubmitting(false)
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4 max-w-4xl">
        {/* Logo Section */}
        <div className="text-center mb-6">
          <div className="flex justify-center mb-4">
            <Image
              src="/images/drone-service-login-logo.webp"
              alt="‡πÇ‡∏•‡πÇ‡∏Å‡πâ ‡∏ö.‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏£‡∏∏‡∏ô‡∏ó‡∏£‡πå ‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™ ‡πÇ‡∏û‡∏£‡πÑ‡∏ß‡πÄ‡∏î‡∏≠‡∏£‡πå ‡∏à‡∏Å."
              width={150}
              height={60}
              className="h-12 w-auto"
            />
          </div>
        </div>
        
        {/* LIFF Success Message - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏°‡∏≠ */}
        <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
          <p className="text-green-700 text-sm text-center">‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
        </div>
        
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£</h1>
          <p className="text-gray-600">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>

          {/* My Bookings Link */}
          <div className="mt-4">
            <Link href="/line/liff/my-bookings" className="inline-flex items-center gap-2 text-blue-600 hover:text-blue-700 text-sm font-medium">
              <FileText className="h-4 w-4" />
              ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
            </Link>
          </div>
        </div>

        {/* Service Type Selection */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-4">
              <button
                type="button"
                onClick={() => setServiceType('drone')}
                className={`p-4 rounded-lg border-2 transition-all ${
                  serviceType === 'drone'
                    ? 'border-green-500 bg-green-50'
                    : 'border-gray-200 hover:border-green-300'
                }`}
              >
                <div className="flex flex-col items-center gap-2">
                  <Zap className={`w-8 h-8 ${serviceType === 'drone' ? 'text-green-600' : 'text-gray-400'}`} />
                  <span className={`font-semibold ${serviceType === 'drone' ? 'text-green-700' : 'text-gray-600'}`}>
                    ‡∏û‡πà‡∏ô‡∏¢‡∏≤‡πÇ‡∏î‡∏£‡∏ô
                  </span>
                  <span className="text-xs text-gray-500">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡πà‡∏ô‡∏¢‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏î‡∏£‡∏ô</span>
                </div>
              </button>

              <button
                type="button"
                onClick={() => setServiceType('equipment')}
                className={`p-4 rounded-lg border-2 transition-all ${
                  serviceType === 'equipment'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-blue-300'
                }`}
              >
                <div className="flex flex-col items-center gap-2">
                  <Truck className={`w-8 h-8 ${serviceType === 'equipment' ? 'text-blue-600' : 'text-gray-400'}`} />
                  <span className={`font-semibold ${serviceType === 'equipment' ? 'text-blue-700' : 'text-gray-600'}`}>
                    ‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
                  </span>
                  <span className="text-xs text-gray-500">‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡πÑ‡∏ñ ‡∏£‡∏ñ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß ‡∏Ø‡∏•‡∏Ø</span>
                </div>
              </button>
            </div>
          </CardContent>
        </Card>
        {showQR ? (
          <div className="flex flex-col items-center justify-center py-8">
            {/* Logo ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ QR */}
            <div className="mb-6">
              <Image
                src="/images/drone-service-login-logo.webp"
                alt="‡πÇ‡∏•‡πÇ‡∏Å‡πâ ‡∏ö.‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏£‡∏∏‡∏ô‡∏ó‡∏£‡πå"
                width={120}
                height={48}
                className="h-10 w-auto"
              />
            </div>
            
            <h2 className="text-2xl font-bold mb-4 text-green-700">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥</h2>
            <Image src="/images/Drone Booking Service.png" alt="PromptPay QR" width={320} height={320} className="rounded-lg border" />
            <div className="mt-4 text-xl font-semibold text-green-700">‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞: {lastDeposit.toLocaleString()} ‡∏ö‡∏≤‡∏ó</div>
            <div className="mt-2 text-gray-600 text-center">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥<br/>‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</div>
            
            <div className="mt-6 flex gap-3">
              <button className="px-6 py-2 bg-gray-200 rounded hover:bg-gray-300" onClick={() => setShowQR(false)}>
                ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏á
              </button>
              <Link href="/line/liff/my-bookings">
                <button className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                  ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
                </button>
              </Link>
            </div>
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-6">{/* ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç LIFF */}
            {/* Customer Information */}
            <Card>
              <CardHeader>
                <CardTitle>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="customerName">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</Label>
                    <Input
                      id="customerName"
                      value={formData.customerName}
                      onChange={(e) => setFormData({ ...formData, customerName: e.target.value })}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="phoneNumber">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</Label>
                    <Input
                      id="phoneNumber"
                      type="tel"
                      placeholder="08x-xxx-xxxx"
                      value={formData.phoneNumber}
                      onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                      required
                    />
                  </div>
                </div>
                <div>
                  <Label htmlFor="customerEmail">‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</Label>
                  <Input
                    id="customerEmail"
                    type="email"
                    placeholder="example@email.com"
                    value={formData.customerEmail}
                    onChange={(e) => setFormData({ ...formData, customerEmail: e.target.value })}
                  />
                  <p className="text-xs text-gray-500 mt-1">‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à</p>
                </div>
              </CardContent>
            </Card>

            {/* Farm Location */}
            <Card>
              <CardHeader>
                <CardTitle>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="farmAddress">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏£‡πà/‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏©‡∏ï‡∏£ *</Label>
                  <Input
                    id="farmAddress"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô 123 ‡∏´‡∏°‡∏π‡πà 5 ‡∏ï.‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏≤"
                    value={formData.farmAddress}
                    onChange={(e) => setFormData({ ...formData, farmAddress: e.target.value })}
                    required
                  />
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="district">‡∏ï‡∏≥‡∏ö‡∏•/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ *</Label>
                    <Input
                      id="district"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏°‡∏∑‡∏≠‡∏á"
                      value={formData.district}
                      onChange={(e) => setFormData({ ...formData, district: e.target.value })}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="province">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î *</Label>
                    <Input
                      id="province"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"
                      value={formData.province}
                      onChange={(e) => setFormData({ ...formData, province: e.target.value })}
                      required
                    />
                  </div>
                </div>
                <div className="grid md:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="farmAreaSize">‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏£‡πà)</Label>
                    <Input
                      id="farmAreaSize"
                      type="number"
                      step="0.1"
                      placeholder="10.5"
                      value={formData.farmAreaSize}
                      onChange={(e) => setFormData({ ...formData, farmAreaSize: e.target.value })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="cropPlanted">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å</Label>
                    <Input
                      id="cropPlanted"
                      placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏≠‡∏°‡∏°‡∏∞‡∏•‡∏¥"
                      value={formData.cropPlanted}
                      onChange={(e) => setFormData({ ...formData, cropPlanted: e.target.value })}
                    />
                  </div>
                  <div>
                    <Label htmlFor="terrainType">‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</Label>
                    <Select
                      value={formData.terrainType}
                      onValueChange={(value) => setFormData({ ...formData, terrainType: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="flat">‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏ö</SelectItem>
                        <SelectItem value="hilly">‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏Ç‡∏≤</SelectItem>
                        <SelectItem value="flooded">‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏Ç‡∏±‡∏á</SelectItem>
                        <SelectItem value="mixed">‡∏ú‡∏™‡∏°</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Service Details - Conditional based on service type */}
            <Card>
              <CardHeader>
                <CardTitle>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {serviceType === 'drone' ? (
                  <>
                    {/* Drone Service Fields */}
                    <div className="grid md:grid-cols-3 gap-4">
                      <div>
                        <Label htmlFor="areaSize">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏£‡πà *</Label>
                        <Input
                          id="areaSize"
                          type="number"
                          step="0.1"
                          value={formData.areaSize}
                          onChange={(e) => setFormData({ ...formData, areaSize: e.target.value })}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="cropType">‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä *</Label>
                        <Select
                          value={formData.cropType}
                          onValueChange={(value) => setFormData({ ...formData, cropType: value })}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä" />
                          </SelectTrigger>
                          <SelectContent>
                            {cropTypes.length === 0 ? (
                              <SelectItem value="no-data" disabled>
                                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä
                              </SelectItem>
                            ) : (
                              cropTypes.map((crop) => (
                                <SelectItem key={crop.id} value={crop.id}>
                                  {crop.name} ({crop.pricePerRai ? `${crop.pricePerRai} ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤'})
                                </SelectItem>
                              ))
                            )}
                            {loadingTypes && (
                              <div className="px-2 py-1 text-xs text-blue-600 italic">
                                üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...
                              </div>
                            )}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="sprayType">‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏≤‡∏£‡∏û‡πà‡∏ô *</Label>
                        <Select
                          value={formData.sprayType}
                          onValueChange={(value) => setFormData({ ...formData, sprayType: value })}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏û‡πà‡∏ô" />
                          </SelectTrigger>
                          <SelectContent>
                            {sprayTypes.length === 0 ? (
                              <SelectItem value="no-data" disabled>
                                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏£‡∏û‡πà‡∏ô
                              </SelectItem>
                            ) : (
                              sprayTypes.map((spray) => (
                                <SelectItem key={spray.id} value={spray.id}>
                                  {spray.name} ({spray.pricePerRai ? `${spray.pricePerRai} ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤'})
                                </SelectItem>
                              ))
                            )}
                            {loadingTypes && (
                              <div className="px-2 py-1 text-xs text-blue-600 italic">
                                üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...
                              </div>
                            )}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="gpsCoordinates">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà/‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS *</Label>
                      <div className="flex gap-2">
                        <Input
                          id="gpsCoordinates"
                          placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS"
                          value={formData.gpsCoordinates}
                          onChange={(e) => setFormData({ ...formData, gpsCoordinates: e.target.value })}
                          className="flex-1"
                        />
                        <Button
                          type="button"
                          variant="outline"
                          onClick={handleGetLocation}
                          disabled={gettingLocation}
                          className="px-3"
                          title="‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
                        >
                          {gettingLocation ? (
                            <div className="animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                          ) : (
                            <Navigation className="h-4 w-4" />
                          )}
                        </Button>
                      </div>
                      {formData.gpsCoordinates && formData.gpsCoordinates.includes(',') && (
                        <p className="text-sm text-green-600 mt-1">
                          üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
                        </p>
                      )}
                      {formData.gpsCoordinates && !formData.gpsCoordinates.includes(',') && (
                        <p className="text-sm text-gray-500 mt-1">
                          üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
                        </p>
                      )}
                    </div>
                  </>
                ) : (
                  <>
                    {/* Equipment Rental Fields */}
                    <div>
                      <Label htmlFor="equipment">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ *</Label>
                      <Select
                        value={selectedEquipment}
                        onValueChange={(value) => setSelectedEquipment(value)}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤" />
                        </SelectTrigger>
                        <SelectContent>
                          {equipment.length === 0 ? (
                            <SelectItem value="no-data" disabled>
                              ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤
                            </SelectItem>
                          ) : (
                            equipment.map((equip) => (
                              <SelectItem key={equip.id} value={equip.id}>
                                {equip.name} - {equip.model} (‡∏ø{equip.rental_price_per_day.toLocaleString()}/‡∏ß‡∏±‡∏ô)
                              </SelectItem>
                            ))
                          )}
                          {loadingTypes && (
                            <div className="px-2 py-1 text-xs text-blue-600 italic">
                              üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                            </div>
                          )}
                        </SelectContent>
                      </Select>
                      {selectedEquipment && (
                        <div className="mt-2 p-3 bg-blue-50 rounded-lg">
                          {(() => {
                            const selected = equipment.find(e => e.id === selectedEquipment)
                            return selected ? (
                              <div className="space-y-1 text-sm">
                                <p className="font-semibold text-blue-900">{selected.name}</p>
                                <p className="text-gray-600">‡∏£‡∏∏‡πà‡∏ô: {selected.model}</p>
                                {selected.category && <p className="text-gray-600">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {selected.category.name}</p>}
                                <p className="text-green-600 font-medium">‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤: ‡∏ø{selected.rental_price_per_day.toLocaleString()}/‡∏ß‡∏±‡∏ô</p>
                                <p className="text-orange-600">‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥: ‡∏ø{selected.deposit_amount.toLocaleString()}</p>
                              </div>
                            ) : null
                          })()}
                        </div>
                      )}
                    </div>
                  </>
                )}
              </CardContent>
            </Card>

            {/* Date Selection */}
            <Card>
              <CardHeader>
                <CardTitle>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="w-full">
                    <Label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà *</Label>
                    <div className="mb-2 text-sm text-amber-600 bg-amber-50 p-2 rounded">
                      ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    </div>
                    <Calendar
                      mode="single"
                      selected={formData.selectedDate}
                      onSelect={(date) => setFormData({ ...formData, selectedDate: date })}
                      locale={th}
                      disabled={(date) => {
                        if (!date) return false
                        const today = new Date()
                        const minDate = new Date(today)
                        minDate.setDate(today.getDate() + 3) // ‡πÄ‡∏û‡∏¥‡πà‡∏° 3 ‡∏ß‡∏±‡∏ô
                        minDate.setHours(0, 0, 0, 0) // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
                        date.setHours(0, 0, 0, 0) // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
                        return date < minDate
                      }}
                      className="w-full rounded-md border"
                    />
                    {formData.selectedDate && (
                      <div className="mt-2 text-center text-green-700 font-semibold">
                        ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {formData.selectedDate.toLocaleDateString("th-TH")}
                      </div>
                    )}
                    <div className="mt-2 text-xs text-gray-500 text-center">
                      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ: {(() => {
                        const minDate = new Date()
                        minDate.setDate(minDate.getDate() + 3)
                        return minDate.toLocaleDateString("th-TH")
                      })()}
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="preferredWorkTime">‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</Label>
                      <Select
                        value={formData.preferredWorkTime}
                        onValueChange={(value) => setFormData({ ...formData, preferredWorkTime: value })}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="morning">‡πÄ‡∏ä‡πâ‡∏≤ (06:00-10:00)</SelectItem>
                          <SelectItem value="afternoon">‡∏ö‡πà‡∏≤‡∏¢ (10:00-14:00)</SelectItem>
                          <SelectItem value="evening">‡πÄ‡∏¢‡πá‡∏ô (14:00-18:00)</SelectItem>
                          <SelectItem value="night">‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô (18:00-22:00)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="urgencyLevel">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô</Label>
                      <Select
                        value={formData.urgencyLevel}
                        onValueChange={(value) => setFormData({ ...formData, urgencyLevel: value })}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="normal">‡∏õ‡∏Å‡∏ï‡∏¥</SelectItem>
                          <SelectItem value="urgent">‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô</SelectItem>
                          <SelectItem value="very_urgent">‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Additional Information */}
            <Card>
              <CardHeader>
                <CardTitle>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="hasWaterSource"
                      checked={formData.hasWaterSource}
                      onChange={(e) => setFormData({ ...formData, hasWaterSource: e.target.checked })}
                      className="w-4 h-4"
                    />
                    <Label htmlFor="hasWaterSource" className="cursor-pointer">‡∏°‡∏µ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="hasObstacles"
                      checked={formData.hasObstacles}
                      onChange={(e) => setFormData({ ...formData, hasObstacles: e.target.checked })}
                      className="w-4 h-4"
                    />
                    <Label htmlFor="hasObstacles" className="cursor-pointer">‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á (‡πÄ‡∏™‡∏≤‡πÑ‡∏ü/‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ)</Label>
                  </div>
                </div>
                <div>
                  <Label htmlFor="referralSource">‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏£‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÉ‡∏î</Label>
                  <Select
                    value={formData.referralSource}
                    onValueChange={(value) => setFormData({ ...formData, referralSource: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="line">LINE</SelectItem>
                      <SelectItem value="facebook">Facebook</SelectItem>
                      <SelectItem value="friend">‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</SelectItem>
                      <SelectItem value="google">Google Search</SelectItem>
                      <SelectItem value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="specialRequirements">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©/‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</Label>
                  <Textarea
                    id="specialRequirements"
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ô‡πâ‡∏≥‡∏™‡∏≥‡∏£‡∏≠‡∏á, ‡πÇ‡∏ó‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ"
                    value={formData.specialRequirements}
                    onChange={(e) => setFormData({ ...formData, specialRequirements: e.target.value })}
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Price Summary */}
            {(totalPrice > 0 || depositAmount > 0) && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Calculator className="h-5 w-5" />
                    ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>{serviceType === 'drone' ? '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:' : '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô:'}</span>
                      <span className="font-semibold">{totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                    </div>
                    <div className="flex justify-between text-lg font-bold text-green-600">
                      <span>‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥{serviceType === 'drone' ? ' (30%)' : ''}:</span>
                      <span>{depositAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                    </div>
                    {serviceType === 'equipment' && (
                      <p className="text-xs text-gray-500 mt-2">
                        * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Notes */}
            <Card>
              <CardHeader>
                <CardTitle>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
                  value={formData.notes}
                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                />
              </CardContent>
            </Card>

            {/* Terms and Conditions */}
            <Card>
              <CardHeader>
                <CardTitle>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-start space-x-2">
                  <input
                    type="checkbox"
                    id="termsAccepted"
                    checked={formData.termsAccepted}
                    onChange={(e) => setFormData({ ...formData, termsAccepted: e.target.checked })}
                    className="w-4 h-4 mt-1"
                    required
                  />
                  <Label htmlFor="termsAccepted" className="cursor-pointer">
                    <span className="text-red-600">*</span> ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
                  </Label>
                </div>
                <div className="flex items-start space-x-2">
                  <input
                    type="checkbox"
                    id="damagePolicyAccepted"
                    checked={formData.damagePolicyAccepted}
                    onChange={(e) => setFormData({ ...formData, damagePolicyAccepted: e.target.checked })}
                    className="w-4 h-4 mt-1"
                    required
                  />
                  <Label htmlFor="damagePolicyAccepted" className="cursor-pointer">
                    <span className="text-red-600">*</span> ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
                  </Label>
                </div>
                <div className="flex items-start space-x-2">
                  <input
                    type="checkbox"
                    id="fuelResponsibilityAccepted"
                    checked={formData.fuelResponsibilityAccepted}
                    onChange={(e) => setFormData({ ...formData, fuelResponsibilityAccepted: e.target.checked })}
                    className="w-4 h-4 mt-1"
                    required
                  />
                  <Label htmlFor="fuelResponsibilityAccepted" className="cursor-pointer">
                    <span className="text-red-600">*</span> ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
                  </Label>
                </div>
                <div className="flex items-start space-x-2">
                  <input
                    type="checkbox"
                    id="returnConditionAccepted"
                    checked={formData.returnConditionAccepted}
                    onChange={(e) => setFormData({ ...formData, returnConditionAccepted: e.target.checked })}
                    className="w-4 h-4 mt-1"
                    required
                  />
                  <Label htmlFor="returnConditionAccepted" className="cursor-pointer">
                    <span className="text-red-600">*</span> ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                  </Label>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
                </p>
              </CardContent>
            </Card>

            <div className="flex gap-4 justify-center">
              <Button 
                type="submit" 
                size="lg" 
                className="bg-green-600 hover:bg-green-700"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...
                  </>
                ) : (
                  <>
                    <CreditCard className="h-4 w-4 mr-2" />
                    ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                  </>
                )}
              </Button>
            </div>
          </form>
        )}
      </div>
    </div>
  )
}