import { Client, FlexMessage, TextMessage } from '@line/bot-sdk'

const client = new Client({
  channelAccessToken: process.env.LINE_MESSAGING_CHANNEL_ACCESS_TOKEN || '',
  channelSecret: process.env.LINE_MESSAGING_CHANNEL_SECRET || ''
})

// Notification Templates

export function createNewProposalNotification(data: {
  providerName: string
  jobTitle: string
  price: number
  jobId: string
}): FlexMessage {
  return {
    type: 'flex',
    altText: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà!',
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üì¨ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà',
            weight: 'bold',
            size: 'xl',
            color: '#16a34a'
          },
          {
            type: 'text',
            text: `${data.providerName} ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì`,
            margin: 'md',
            wrap: true
          },
          {
            type: 'box',
            layout: 'vertical',
            margin: 'lg',
            spacing: 'sm',
            contents: [
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏á‡∏≤‡∏ô:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  { type: 'text', text: data.jobTitle, wrap: true, size: 'sm', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏£‡∏≤‡∏Ñ‡∏≤:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  {
                    type: 'text',
                    text: `${data.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
                    color: '#16a34a',
                    weight: 'bold',
                    size: 'sm',
                    flex: 4
                  }
                ]
              }
            ]
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
              uri: `${process.env.NEXT_PUBLIC_BASE_URL}/farmer/my-jobs?job=${data.jobId}`
            },
            style: 'primary',
            color: '#16a34a'
          }
        ]
      }
    }
  }
}

export function createProposalAcceptedNotification(data: {
  jobTitle: string
  date: string
  price: number
  proposalId: string
}): FlexMessage {
  return {
    type: 'flex',
    altText: 'üéâ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö!',
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üéâ ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏•‡πâ‡∏ß!',
            weight: 'bold',
            size: 'xl',
            color: '#16a34a'
          },
          {
            type: 'text',
            text: '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            margin: 'md',
            wrap: true
          },
          {
            type: 'box',
            layout: 'vertical',
            margin: 'lg',
            spacing: 'sm',
            contents: [
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏á‡∏≤‡∏ô:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  { type: 'text', text: data.jobTitle, wrap: true, size: 'sm', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  { type: 'text', text: data.date, size: 'sm', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏£‡∏≤‡∏Ñ‡∏≤:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  {
                    type: 'text',
                    text: `${data.price.toLocaleString()} ‡∏ö‡∏≤‡∏ó`,
                    color: '#16a34a',
                    weight: 'bold',
                    size: 'sm',
                    flex: 4
                  }
                ]
              }
            ]
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô',
              uri: `${process.env.NEXT_PUBLIC_BASE_URL}/provider/my-proposals?proposal=${data.proposalId}`
            },
            style: 'primary',
            color: '#16a34a'
          }
        ]
      }
    }
  }
}

export function createJobCompletedNotification(data: {
  jobTitle: string
  jobId: string
  recipientType: 'farmer' | 'provider'
}): FlexMessage {
  return {
    type: 'flex',
    altText: '‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß!',
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
            weight: 'bold',
            size: 'xl',
            color: '#16a34a'
          },
          {
            type: 'text',
            text: data.recipientType === 'farmer'
              ? '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ SmartFarmer'
              : '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß',
            margin: 'md',
            wrap: true
          },
          {
            type: 'box',
            layout: 'vertical',
            margin: 'lg',
            spacing: 'sm',
            contents: [
              {
                type: 'text',
                text: data.recipientType === 'farmer'
                  ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'
                  : '‡∏£‡∏≠‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
                color: '#666666',
                size: 'sm',
                wrap: true
              }
            ]
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: data.recipientType === 'farmer' ? '‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß' : '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
              uri: `${process.env.NEXT_PUBLIC_BASE_URL}/review/${data.jobId}`
            },
            style: 'primary',
            color: '#16a34a'
          }
        ]
      }
    }
  }
}

export function createJobReminderNotification(data: {
  jobTitle: string
  date: string
  time: string
  jobId: string
}): FlexMessage {
  return {
    type: 'flex',
    altText: '‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ',
    contents: {
      type: 'bubble',
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥',
            weight: 'bold',
            size: 'xl',
            color: '#f59e0b'
          },
          {
            type: 'text',
            text: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ',
            margin: 'md',
            wrap: true
          },
          {
            type: 'box',
            layout: 'vertical',
            margin: 'lg',
            spacing: 'sm',
            contents: [
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏á‡∏≤‡∏ô:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  { type: 'text', text: data.jobTitle, wrap: true, size: 'sm', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  { type: 'text', text: data.date, size: 'sm', flex: 4 }
                ]
              },
              {
                type: 'box',
                layout: 'baseline',
                contents: [
                  { type: 'text', text: '‡πÄ‡∏ß‡∏•‡∏≤:', color: '#aaaaaa', size: 'sm', flex: 1 },
                  { type: 'text', text: data.time, size: 'sm', flex: 4 }
                ]
              }
            ]
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            action: {
              type: 'uri',
              label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
              uri: `${process.env.NEXT_PUBLIC_BASE_URL}/jobs/${data.jobId}`
            },
            style: 'primary',
            color: '#f59e0b'
          }
        ]
      }
    }
  }
}

// Helper Functions

export async function sendPushMessage(lineUserId: string, message: FlexMessage | TextMessage) {
  if (!process.env.LINE_MESSAGING_CHANNEL_ACCESS_TOKEN) {
    console.warn('LINE_MESSAGING_CHANNEL_ACCESS_TOKEN not configured')
    return
  }

  try {
    await client.pushMessage(lineUserId, message)
    console.log(`Sent message to ${lineUserId}`)
  } catch (error) {
    console.error('Error sending LINE message:', error)
    throw error
  }
}

export async function sendMulticastMessage(lineUserIds: string[], message: FlexMessage | TextMessage) {
  if (!process.env.LINE_MESSAGING_CHANNEL_ACCESS_TOKEN) {
    console.warn('LINE_MESSAGING_CHANNEL_ACCESS_TOKEN not configured')
    return
  }

  try {
    await client.multicast(lineUserIds, message)
    console.log(`Sent multicast message to ${lineUserIds.length} users`)
  } catch (error) {
    console.error('Error sending LINE multicast:', error)
    throw error
  }
}

export async function setRichMenuByRole(lineUserId: string, role: 'farmer' | 'provider') {
  const richMenuId = role === 'farmer'
    ? process.env.LINE_RICH_MENU_FARMER_ID
    : process.env.LINE_RICH_MENU_PROVIDER_ID

  if (!richMenuId) {
    console.warn(`Rich menu ID for ${role} not configured`)
    return
  }

  try {
    await client.linkRichMenuToUser(lineUserId, richMenuId)
    console.log(`Set ${role} rich menu for user ${lineUserId}`)
  } catch (error) {
    console.error('Error setting rich menu:', error)
    throw error
  }
}

export async function unlinkRichMenu(lineUserId: string) {
  try {
    await client.unlinkRichMenuFromUser(lineUserId)
    console.log(`Unlinked rich menu for user ${lineUserId}`)
  } catch (error) {
    console.error('Error unlinking rich menu:', error)
  }
}
